
CREATE OR REPLACE PACKAGE MAKIPACK AS -- –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ê
PROCEDURE procShowProd(procGroupID NUMBER, procMon VARCHAR2);
PROCEDURE nameIncThisMonth;
PROCEDURE countIncThisMonth;
PROCEDURE procGetAccountCount(bankId NUMBER, contID NUMBER);
PROCEDURE delGroupMonth(groupID NUMBER, montht NUMBER);
FUNCTION getAccCount(bankId NUMBER, contID NUMBER) RETURN NUMBER;
FUNCTION get_bank_name(id NUMBER) RETURN BANKS.NAME%Type;
FUNCTION get_bank_id(b_name VARCHAR2) RETURN BANKS.BANK_ID%Type;
END MAKIPACK;

--–¢–ï–õ–û –ü–ê–ö–ï–¢–ê
CREATE OR REPLACE PACKAGE BODY MAKIPACK AS --AS IS —Ä–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç

PROCEDURE procShowProd(procGroupID NUMBER, procMon VARCHAR2) --–Ω–µ –∏–º—è –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
AS
NOT_VALID_MONTH EXCEPTION;
FAKE_DATE EXCEPTION;
NOT_VALID_PRODUCT EXCEPTION;
NO_DATA EXCEPTION;
CURSOR currMYGroups(groupID NUMBER, mon VARCHAR2) IS
	select P.NAME
	from PRODUCTS P, INCOMING INC
	where 3000000001 = P.GROUP_ID and
		P.PROD_ID = INC.PROD_ID and
		to_char(INC.INC_DATE, 'mm-yy') = mon || '-' || to_char(sysdate, 'yy'); 
g currMYGroups%ROWTYPE;
BEGIN
IF (procMon < 1 or procMon > 12) then
	RAISE NOT_VALID_MONTH;
END IF;
IF (procMon > TO_CHAR(SYSDATE, 'MM')) then
	RAISE FAKE_DATE;
END IF;
IF (procGroupID < 3000000000 OR procGroupID > 4000000000) then
	RAISE NOT_VALID_PRODUCT;
END IF;
OPEN currMYGroups(procGroupID, procMon);
FETCH currMYGroups INTO g;
IF (currMYGroups%NOTFOUND) then
	RAISE NO_DATA;
END IF;
dbms_output.put_line('‚Ññ Good');
WHILE currMYGroups%FOUND LOOP
	dbms_output.put_line(to_char(currMYGroups%ROWCOUNT)|| ' ' ||g.NAME);
	FETCH currMYGroups INTO g;
END LOOP;
EXCEPTION
	WHEN NOT_VALID_MONTH THEN
		dbms_output.put_line('Not valid number of month');
	WHEN NOT_VALID_PRODUCT THEN
		dbms_output.put_line('Not valid product id');
	WHEN FAKE_DATE THEN
		dbms_output.put_line('Late date');
	WHEN NO_DATA THEN
		dbms_output.put_line('No data');
END;


PROCEDURE nameIncThisMonth
IS
NO_DATA EXCEPTION;
CURSOR currMGroups IS
	select distinct G.NAME
	from GROUPS G, PRODUCTS P, INCOMING INC
	where G.GROUP_ID = P.GROUP_ID and
		P.PROD_ID = INC.PROD_ID and
		to_char(INC.INC_DATE, 'mm-yyyy') = to_char(sysdate, 'mm-yyyy');
		g currMGroups%ROWTYPE; --–í–†–ï–ú–ï–ù–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –¢–ï–ö–£–©–ï–ô –°–¢–†–û–ö–ò –ö–£–†–°–û–†–ê
BEGIN

OPEN currMGroups; -- –û–¢–ö–†–´–í–ê–ï–ú

FETCH currMGroups INTO g; --–§–ï–¢–ß–ò–ú
IF (currMGroups%NOTFOUND) then -- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
	RAISE NO_DATA;
END IF;

dbms_output.put_line('–ì—Ä—É–ø–ø–∞');
WHILE currMGroups%FOUND LOOP -- –¶–∏–∫–ª while, –∫—É—Ä—Å–æ—Ä–Ω—ã–π –∞—Ç—Ç—Ä–∏–±—É—Ç %found, –ø–æ–∫–∞ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
	dbms_output.put_line(to_char(currMGroups%ROWCOUNT)|| ' ' ||g.NAME);
	FETCH currMGroups INTO g; --–§–µ—Ç—á–∏–º –≤ —Ü–∏–∫–ª–µ
END LOOP;

EXCEPTION --–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	WHEN NO_DATA THEN
		dbms_output.put_line('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
END;

PROCEDURE countIncThisMonth
AS
group_count number(10,0) := 0;
BEGIN
    SELECT COUNT(DISTINCT g.GROUP_ID) INTO group_count
    FROM GROUPS g, PRODUCTS p, INCOMING inc
    WHERE
        p.PROD_ID = inc.PROD_ID AND
        p.GROUP_ID = g.GROUP_ID AND
        TO_CHAR(inc.INC_DATE, 'mm-yy') = TO_CHAR(SYSDATE, 'mm-yy');
    dbms_output.put_line( group_count  || ' –ì—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ');
END;



PROCEDURE delGroupMonth(groupID NUMBER, montht NUMBER)
AS
    NOT_VALID_MONTH EXCEPTION;          -- –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    NO_INCS_IN_THIS_MON EXCEPTION;
    NO_GROUP_INCS_IN_THIS_MON EXCEPTION;
    mon NUMBER;                        -- –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    g_id NUMBER;
    incs_in_month NUMBER;
    group_incs_in_month NUMBER;
BEGIN
    mon := montht;                          -- –ú–µ—Å—è—Ü
    g_id := groupID;                -- –ì—Ä—É–ø–ø–∞
    IF (mon < 1 OR mon > 12) THEN      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—Ü–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —á—Ç–æ±—ã –Ω–µ –±—ã–ª–æ –±—Ä–µ–¥–∞
        RAISE NOT_VALID_MONTH;
    END IF;
                                       -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
    SELECT COUNT(INC_ID) INTO incs_in_month FROM INCOMING  
        WHERE TO_CHAR(INC_DATE, 'MM') = mon AND TO_CHAR(INC_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY');
    IF (incs_in_month = 0) THEN
        RAISE NO_INCS_IN_THIS_MON;     -- –ï—Å–ª–∏ –Ω–µ—Ç
    END IF;
                                       -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    SELECT COUNT(INC.INC_ID) INTO group_incs_in_month FROM INCOMING INC, PRODUCTS P
        WHERE TO_CHAR(INC.INC_DATE, 'MM') = mon
        AND TO_CHAR(INC.INC_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
        AND P.PROD_ID = INC.PROD_ID
        AND P.GROUP_ID = g_id;
    IF (group_incs_in_month = 0) THEN  
        RAISE NO_GROUP_INCS_IN_THIS_MON;-- –ï—Å–ª–∏ –Ω–µ—Ç
    END IF;
                                        -- –ù–µ –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ –æ—à–∏–±–∫–∏? –£–¥–æ–ª—è–π
    DELETE FROM INCOMING WHERE INC_ID IN (
        SELECT INC.INC_ID FROM INCOMING INC, PRODUCTS P
            WHERE TO_CHAR(INC.INC_DATE, 'MM') = mon
            AND TO_CHAR(INC.INC_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
            AND P.PROD_ID = INC.PROD_ID
            AND P.GROUP_ID = g_id
    );
    dbms_output.put_line(group_incs_in_month || ' incs deleted');
    EXCEPTION                                                          --–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        WHEN NOT_VALID_MONTH THEN
            dbms_output.put_line('Not valid number of month');
        WHEN NO_INCS_IN_THIS_MON THEN
            dbms_output.put_line('No incomings in this month');
        WHEN NO_GROUP_INCS_IN_THIS_MON THEN
            dbms_output.put_line('No group incomings in this month');
END;


FUNCTION get_bank_name(id NUMBER) --—Ç—É—Ç –º—ã –Ω–µ —Å—Ç–∞–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
RETURN BANKS.NAME%Type --–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —Ç–∏–ø, –∫–∞–∫ –∏–º—è –±–∞–Ω–∫–∞
AS
bank_name BANKS.NAME%Type;
BEGIN
	BEGIN
		SELECT NAME INTO bank_name FROM BANKS WHERE BANK_ID = id; --–ò—Å–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç
	EXCEPTION --–ò—Å–∫–ª—é—á–µ–Ω–∏–π
		WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR(-20001, '–ë–∞–Ω–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'); -- –ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ
		WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20002, '–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'); --–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
	END;
	RETURN bank_name; --–î–µ–ª–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
END;

--–û–ë–†–ê–¢–ù–ê–Ø
FUNCTION get_bank_id(b_name VARCHAR2)
RETURN BANKS.BANK_ID%Type -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–æ–π –∂–µ —Ç–∏–ø
AS
bank_id BANKS.BANK_ID%Type;
BEGIN
	BEGIN
		SELECT BANK_ID INTO bank_id FROM BANKS WHERE NAME = b_name;
	EXCEPTION
		WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR(-20001, '–ë–∞–Ω–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
		WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20002, '–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
	END;
	RETURN bank_id;
END;

FUNCTION getAccCount(bankId NUMBER, contID NUMBER)
RETURN NUMBER
AS
NOT_VALID_BANK_ID EXCEPTION;
NOT_VALID_CONTRAGENT_ID EXCEPTION;
accCount NUMBER;
BEGIN
	IF (bankId > 2000000000 OR bankId < 999999999) then
		RAISE NOT_VALID_BANK_ID; --–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –±–∞–Ω–∫–∞
	END IF;
	IF (contID > 70000000000 OR contID < 5999999999) then
		RAISE NOT_VALID_CONTRAGENT_ID; --–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
	END IF;
	BEGIN
		SELECT COUNT(ACC_ID) INTO accCount
		FROM ACCOUNTS
		WHERE BANK_ID = bankId AND
			CONTR_ID = contID AND
			(DAYTO IS NULL OR DAYTO >= SYSDATE);
	
    EXCEPTION
		WHEN TOO_MANY_ROWS THEN RAISE_APPLICATION_ERROR(-20001, '–ë–∞–Ω–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
		WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20002, '–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
	END;

	RETURN accCount;
    
    EXCEPTION
		WHEN NOT_VALID_BANK_ID THEN RAISE_APPLICATION_ERROR(-20003, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–Ω–∫–∞');
		WHEN NOT_VALID_CONTRAGENT_ID THEN RAISE_APPLICATION_ERROR(-20004, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞');
END;

PROCEDURE procGetAccountCount(bankId NUMBER, contID NUMBER)
AS
NOT_VALID_BANK_ID EXCEPTION;
NOT_VALID_CONTRAGENT_ID EXCEPTION;
accCount NUMBER;
BEGIN
	IF (bankId > 2000000000 OR bankId < 999999999) then
		RAISE NOT_VALID_BANK_ID; --–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –±–∞–Ω–∫–∞
	END IF;
	IF (contID > 70000000000 OR contID < 5999999999) then
		RAISE NOT_VALID_CONTRAGENT_ID; --–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
	END IF;

	SELECT getAccCountProc(bankId, contID) INTO accCount FROM DUAL;
	
    dbms_output.put_line('Count: ' || TO_CHAR(accCount));
	
    EXCEPTION
		WHEN NOT_VALID_BANK_ID THEN
			dbms_output.put_line('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–Ω–∫–∞');
		WHEN NOT_VALID_CONTRAGENT_ID THEN
			dbms_output.put_line('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞');
END;
END MAKIPACK;
--–ö–û–ù–ï–¶ –¢–ï–õ–ê

--–í–´–ó–´–í–ê–ô –ù–ï –•–û–ß–£
BEGIN
MAKIPACK.countIncThisMonth;
MAKIPACK.nameIncThisMonth;
END;
–
