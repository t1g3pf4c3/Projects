#lang racket

(define (good-enough? guess x)
(< (abs (- (expt guess 2) x)) 0.000000001))

(define (improve guess x)
(average guess (/ x guess)))

(define (average x y)
(/ (+ x y) 2))

(define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x)
x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 2)

(define (search f neg-point pos-point)
(let ((midpoint (average neg-point pos-point)))
(if (close-enough? neg-point pos-point)
midpoint
(let ((test-value (f midpoint)))
(cond ((positive? test-value)
(search f neg-point midpoint))
((negative? test-value)
(search f midpoint pos-point))
(else midpoint))))))


(define (close-enough? v1 v2 acc)
(< (abs (- v1 v2)) acc))

(define (half-interval-method f a b)
(let ((a-value (f a))
(b-value (f b)))
(cond ((and (negative? a-value) (positive? b-value))
(search f a b))
((and (negative? b-value) (positive? a-value))
(search f b a))
(else
(error "У аргументов не разные знаки " a b)))))

(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3))
1.0
2.0)
